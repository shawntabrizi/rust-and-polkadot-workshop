diff --git a/src/balances.rs b/src/balances.rs
index b9559f7..2a4e68a 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -1,22 +1,15 @@
 use std::collections::BTreeMap;
 
-/*
-	TODO: Define the common types used in this pallet:
-		- `AccountID`
-		- `Balance`
-
-	Then update this pallet to use these common types.
-
-	HINT: Remember that our `Result` does not return `AccountID`, so keep this `&'static str`.
-*/
+type AccountId = &'static str;
+type Balance = u128;
 
 /// This is the Balances Module.
 /// It is a simple module which keeps track of how much balance each account has in this state
 /// machine.
 #[derive(Debug)]
 pub struct Pallet {
-	// A simple storage mapping from accounts (`&'static str`) to their balances (`u128`).
-	balances: BTreeMap<&'static str, u128>,
+	// A simple storage mapping from accounts to their balances.
+	balances: BTreeMap<AccountId, Balance>,
 }
 
 impl Pallet {
@@ -26,13 +19,13 @@ impl Pallet {
 	}
 
 	/// Set the balance of an account `who` to some `amount`.
-	pub fn set_balance(&mut self, who: &'static str, amount: u128) {
+	pub fn set_balance(&mut self, who: AccountId, amount: Balance) {
 		self.balances.insert(who, amount);
 	}
 
 	/// Get the balance of an account `who`.
 	/// If the account has no stored balance, we return zero.
-	pub fn balance(&self, who: &'static str) -> u128 {
+	pub fn balance(&self, who: AccountId) -> Balance {
 		*self.balances.get(&who).unwrap_or(&0)
 	}
 
@@ -41,9 +34,9 @@ impl Pallet {
 	/// and that no mathematical overflows occur.
 	pub fn transfer(
 		&mut self,
-		caller: &'static str,
-		to: &'static str,
-		amount: u128,
+		caller: AccountId,
+		to: AccountId,
+		amount: Balance,
 	) -> Result<(), &'static str> {
 		let caller_balance = self.balance(&caller);
 		let to_balance = self.balance(&to);
diff --git a/src/system.rs b/src/system.rs
index 50eaccd..4b0d0b2 100644
--- a/src/system.rs
+++ b/src/system.rs
@@ -1,22 +1,17 @@
 use std::collections::BTreeMap;
 
-/*
-	TODO: Define the common types used in this pallet:
-		- `AccountID`
-		- `BlockNumber`
-		- `Nonce`
-
-	Then update this pallet to use these common types.
-*/
+type AccountId = &'static str;
+type BlockNumber = u32;
+type Nonce = u32;
 
 /// This is the System Pallet.
 /// It handles low level state needed for your blockchain.
 #[derive(Debug)]
 pub struct Pallet {
 	/// The current block number.
-	block_number: u32,
+	block_number: BlockNumber,
 	/// A map from an account to their nonce.
-	nonce: BTreeMap<&'static str, u32>,
+	nonce: BTreeMap<AccountId, Nonce>,
 }
 
 impl Pallet {
@@ -26,7 +21,7 @@ impl Pallet {
 	}
 
 	/// Get the current block number.
-	pub fn block_number(&self) -> u32 {
+	pub fn block_number(&self) -> BlockNumber {
 		self.block_number
 	}
 
@@ -38,7 +33,7 @@ impl Pallet {
 
 	// Increment the nonce of an account. This helps us keep track of how many transactions each
 	// account has made.
-	pub fn inc_nonce(&mut self, who: &'static str) {
+	pub fn inc_nonce(&mut self, who: AccountId) {
 		let nonce = *self.nonce.get(who).unwrap_or(&0);
 		let new_nonce = nonce + 1;
 		self.nonce.insert(who, new_nonce);
